include("../../2DClassical/partition.jl")
using TensorOperations
using LinearAlgebra
using Arpack
using KrylovKit
#--- Debug Parameter


#------- function ordered eigen value decomposition
function eigenorder(A::Array{Float64})
    F = eigen(A)
    order = sortperm(F.values,rev=true,by=abs)
    return F.vectors[:,order],F.values[order]
end

function ApplyAT(T::Array{Float64},A::Array{Float64},x::Array{Float64})
    @tensor x[-1,-2] := x[1,2]*T[1,4,-1,3]*A[2,3,-2,4]
    x = x/maximum(x)
    return x
end

x = 1

function HMover(HT::Array{Float64},T::Array{Float64},chimax::Int64)

    chi = size(HT,2);dlink = size(T,1)
    @tensor temp[-1,-2,-3,-4,-5,-6] := HT[6,-2,8,5]*HT[7,5,9,-5]*T[1,-1,6,2]*T[1,2,7,-4]*
                            T[8,-3,3,4]*T[9,4,3,-6]
    temp = reshape(temp,chi*dlink^2,chi*dlink^2)
    F = svd((temp+temp')/2)

    if chi*dlink^2 > chimax
        Ph = reshape(F.U,dlink,chi,dlink,chimax)
    else
        Ph = reshape(F.U,dlink,chi,dlink,dlink^2*chi)
    end
    return Ph
end

function VMover(VT::Array{Float64},T::Array{Float64},chimax::Int64)
    VT = permutedims(VT,[4,1,2,3])
    T  = permutedims(T,[4,1,2,3])
    Pv = HMover(VT,T,chimax)
    return Pv
end

function  CenterProjector(CenterLeft::Array{Float64},CenterRight::Array{Float64},
                Left::Array{Float64},Right::Array{Float64},chimax::Int64)
    dlink = size(Left,1);chi = size(CenterLeft,3)
    @tensor temp[-1,-2,-3,-4,-5,-6] := CenterLeft[3,4,-2]*CenterRight[4,3,-5]*Left[1,2,-3]*
                                Left[6,5,-1]*Right[2,1,-6]*Right[5,6,-4]
    temp = reshape(temp,chi*dlink^4,chi*dlink^4)
    F = svd((temp+temp')/2)

    if chi*dlink^4 > chimax
        Pc = reshape(F.U,dlink^2,chi,dlink^2,chimax)
    else
        Pc = reshape(F.U,dlink^2,chi,dlink^2,dlink^4)
    end
    return Pc
end


function CorseGraining(T::Array{Float64},NumLayer::Int64,chimax;Sz=Float64[1.0 0.0; 0.0 -1.0])
    HT = T; VT = T
    sizeT = size(T,1)
    #---- Left and Right
    Flr = svd(reshape(T,sizeT^2,sizeT^2))
    TL = Flr.U*Matrix(Diagonal(sqrt.(Flr.S)))
    TR = Flr.V*Matrix(Diagonal(sqrt.(Flr.S)))
    TL = reshape(TL,sizeT,sizeT,sizeT^2)
    TR = reshape(TR,sizeT,sizeT,sizeT^2)

    #---- Up and Right
    Fud = svd(reshape(permutedims(T,[4,1,2,3]),sizeT^2,sizeT^2))
    TU = Fud.U*Matrix(Diagonal(sqrt.(Fud.S)))
    TD = Fud.V*Matrix(Diagonal(sqrt.(Fud.S)))
    TU = reshape(TU,sizeT,sizeT,sizeT^2)
    TD = reshape(TD,sizeT,sizeT,sizeT^2)


    CenterLeft = TL
    CenterRight = TR



    Znorm = Array{Float64}(undef,0)
    HTnorm = Array{Float64}(undef,0)
    VTnorm = Array{Float64}(undef,0)
    NumSite = Array{Int64}(undef,0)
    FEttrg = Array{Float64}(undef,0)

    for j in 1:NumLayer
        Ph = HMover(HT,T,chimax)

        Pv = VMover(VT,T,chimax)

        Pc = CenterProjector(CenterLeft,CenterRight,TL,TR,chimax)

        @tensor verticalUp[-1,-2,-3,-4] := VT[3,2,-3,4]*TL[5,4,-4]*TU[2,1,-2]*Pv[5,3,1,-1]
        @tensor horizontalLeft[-1,-2,-3,-4] := HT[3,2,5,-3]*TL[5,4,-2]*TD[1,3,-4]*Ph[1,2,4,-1]
        @tensor verticalDn[-1,-2,-3,-4] := 
        @tensor verticalRight[-1,-2,-3,-4] :=

        @tensor HT[-1,-2,-3,-4] := HT*T*T*Ph*Ph
        @tensor VT[-1,-2,-3,-4] := VT*T*T*Pv*Pv

        @tensor CenterLeft[-1,-2,-3] := verticalUp*horizontalLeft*CenterLeft*Pc
        @tensor CenterRight[-1,-2,-3] :=


        Ns = 1+8*sum(1:1:j)
        Z = tr(reshape(CenterDenominator,size(CenterDenominator,1)^2,size(CenterDenominator,1)^2))
        @tensor Z[] := CenterDenominator[1,2,1,2]
        FE = (log(Z[1])+sum(log.(Znorm))+2*sum([j:-1:1...].*log.(HTnorm))+
                        2*sum([j:-1:1...].*log.(VTnorm)))/Ns
        append!(FEttrg,[FE])
        append!(NumSite,[Ns])
        #end
    end

    return CenterDenominator,CenterNumerator,HT,VT,Znorm,HTnorm,VTnorm,FEttrg,NumSite

end


#-----  Set Parameter
Dlink = 2
#chimax = 10
sx = Float64[0.0 1.0;
            1.0  0.0]
sz = Float64[1.0 0.0;
            0.0  -1.0]


#---- Base Tensor


MagExact = Array{Float64}(undef,0)
MagTree = Array{Float64}(undef,0)
MagTest = Array{Float64}(undef,0)
InternalEnergyTree = Array{Float64}(undef,0)
InternalEnergyExact = Array{Float64}(undef,0)
FreeEnergyExact = Array{Float64}(undef,0)
FreeEnergyTree = Array{Float64}(undef,0)


for chimax in 10:10:40
    #BetaExact =1/2*log(1+sqrt(2))
    Beta = 0.9994*BetaExact
    #Beta = 1/T
    feexact = ComputeFreeEnergy(Beta)
    append!(FreeEnergyExact,[feexact])
    println("This is Beta $Beta")
    #=
    E0=0.0;
    T0= zeros(Dlink,Dlink,Dlink,Dlink)
    T0 = T0 .+ exp(-(0-E0)*Beta)
    T0[1,1,1,1]=T0[2,2,2,2]= exp(-(4-E0)*Beta)
    T0[1,2,1,2]=T0[2,1,2,1]= exp(-(-4-E0)*Beta)
    @tensor Tsx[-1,-2,-3,-4] := T0[-1,-2,1,-4]*sz[1,-3]
    #@tensor Tsz[-1,-2,-3,-4] := T[-1,-2,1,-4]*sz[1,-3]
    =#

    #----- Base Tensor Test from 2D
    Q = Float64[exp(Beta) exp(-Beta);
                exp(-Beta) exp(Beta)]
    g = zeros(Dlink,Dlink,Dlink,Dlink)
    g[1,1,1,1] = g[2,2,2,2] = 1
    gp = zeros(Dlink,Dlink,Dlink,Dlink)
    gp[1,1,1,1] = -1;gp[2,2,2,2] = 1
    @tensor T[-1,-2,-3,-4] := sqrt(Q)[-1,1]*sqrt(Q)[-2,2]*sqrt(Q)[-3,3]*sqrt(Q)[-4,4]*g[1,2,3,4]
    @tensor Tsx[-1,-2,-3,-4] := sqrt(Q)[-1,1]*sqrt(Q)[-2,2]*sqrt(Q)[-3,3]*sqrt(Q)[-4,4]*gp[1,2,3,4]

    #for chimax in 10:10:30
    #for NumLayer in 100:100:100
    #chimax = 20
        NumLayer = 500
        Ns = 1+8*sum(1:1:NumLayer)
        rhoDenominator,rhoNumerator,HT,VT,Znorm,HTnorm,VTnorm,FEttrg,NumSite = CorseGraining(T,NumLayer,chimax,Sz=sx)
        @tensor Z[] := rhoDenominator[1,2,1,2]
        #FE = (log(Z[1])+sum(log.(Znorm))+2*sum([1:1:NumLayer...].*log.(HTnorm))+
        #                2*sum([1:1:NumLayer...].*log.(VTnorm)))/Ns
        global FE = (log(Z[1])+sum(log.(Znorm))+2*sum([NumLayer:-1:1...].*log.(HTnorm))+
                        2*sum([NumLayer:-1:1...].*log.(VTnorm)))/Ns
        append!(FreeEnergyTree,[FE])
    #end
    #end


end

#------------------------All below are for testing use

#=
#exact = (1-sinh(2*Beta)^(-4))^(1/8)
#append!(MagExact,[exact])
#
@tensor Numerator[] := Tsx[3,11,1,4]*T[17,10,13,11]*T[2,18,3,7]*T[16,15,17,18]*
                            rhoDenominator[6,5,8,12]*VT[9,4,6,10]*VT[8,7,9,15]*HT[1,14,2,5]*HT[13,12,16,14]
@tensor Denominator[] := T[3,11,1,4]*T[17,10,13,11]*T[2,18,3,7]*T[16,15,17,18]*
                            rhoDenominator[6,5,8,12]*VT[9,4,6,10]*VT[8,7,9,15]*HT[1,14,2,5]*HT[13,12,16,14]
append!(MagTree,[Numerator[1]/Denominator[1]])

@tensor EnergyNumerator[] := Tsx[17,3,4,1]*Tsx[4,9,10,5]*T[24,2,8,3]*T[8,7,14,9]*T[16,23,17,18]*T[22,21,24,23]*
                    VT[20,1,6,2]*VT[6,5,12,7]*VT[19,18,20,21]*HT[10,15,16,11]*HT[14,13,22,15]*rhoDenominator[12,11,19,13]
@tensor EnergyDenominator[] := T[17,3,4,1]*T[4,9,10,5]*T[24,2,8,3]*T[8,7,14,9]*T[16,23,17,18]*T[22,21,24,23]*
                    VT[20,1,6,2]*VT[6,5,12,7]*VT[19,18,20,21]*HT[10,15,16,11]*HT[14,13,22,15]*rhoDenominator[12,11,19,13]

append!(InternalEnergyTree,[EnergyNumerator[1]/EnergyDenominator[1]])

internalenergyexact = ComputeInternalEnergy(Beta)
append!(InternalEnergyExact,[internalenergyexact])

=#
